plot(training$CompressiveStrength,pch=19)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training)
p1
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training)
cutFlyAshT<-cut2(training$FlyAsh,g=3)
table(cutFlyAshT)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAshT)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(concrete$CompressiveStrength), concrete$FlyAsh,data=concrete,colour=cutFlyAsh)
qplot(concrete$CompressiveStrength, concrete$FlyAsh,data=concrete,colour=cutFlyAsh)
plot(concrete$Superplasticizer,pch=19)
#Question 3
hist(concrete$Superplasticizer,pch=19)
hist(log(concrete$Superplasticizer+1),pch=19)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
View(training)
TPCA<-training[,c(65.75)]
TPCA<-training[,c(65,75)]
View(TPCA)
TPCA<-training[,c(65:75)]
View(TPCA)
TPCA<-training[,c(60:75)]
View(TPCA)
TPCA<-training[,c(50:73)]
View(TPCA)
TPCA<-training[,c(55:73)]
View(TPCA)
TPCA<-training[,c(58:73)]
View(TPCA)
TPCA<-training[,c(58:69)]
View(TPCA)
TPCA<-training[,c(58:70)]
View(TPCA)
TPCA<-training[,c(58:69)]
View(TPCA)
TPCA<-training[,c(58:69),row.names = FALS]
TPCA<-training[,c(58:69),row.names = FALSE]
TPCA<-training[,c(58:69)]
TPCA$row.names<-null
TPCA$row.names<-NULL
View(TPCA)
TPCA$row.names<-NULL
View(TPCA)
preProc<-preProcess(TPCA,method="pca",pcaComp=2)
preProc<-preProcess(TPCA,method="pca",pcaComp=2)
trainPC<-predict(preProc,TPCA)
modelFit<-train(training$type~.,method="glm",data=TrainPC)
trainPC<-predict(preProc,TPCA)
modelFit<-train(training$type~.,method="glm",data=trainPC)
preProc
trainPC
preProc
preProc
trainPC
summary(trainPC)
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
#Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
TPCA<-training[,c(58:69)]
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
trainingP<-training[,c(1,58:69)]
View(trainingP)
testing
View(testing)
testing
View(testing)
testing$Type,
testing$Type
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing$Type
testing$type
training$type
preProc
trainPC
trainPC<-predict(preProc,TPCA)
trainPC
modelFit<-train(training$type~.,method="glm",data=trainPC)
View(trainPC)
View(training)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing[,-58])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC<-predict(preProc,testing[,-58])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingP<-training[,c(1,58:69)]
View(trainingP)
trainPC
preProc<-preProcess(trainingP,method="pca",thresh=0.8)
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP)
trainPC<-predict(preProc,trainingP[,-1])
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP[,-1])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
View(testing)
testPC<-predict(preProc,testing[,-1])
trainingP<-training[,c(1,58:69)]
testingP<-testing[,c(1,58:69)]
testPC<-predict(preProc,testingP[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
trainPC
modelFit1<-train(training$diagnosis~.,method="glm",data=training[-1])
modelFit1
confusionMatrix(testing$diagnosis,predict(modelFit1,testingP[,-1]))
confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
#one using PCA with principal components explaining 80% of the variance in the predictors.
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP[,-1])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testingP[,-1])
confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
modelFit1<-train(trainingP$diagnosis~.,method="glm",data=trainingP[-1])
confusionMatrix(testingP$diagnosis,predict(modelFit1,testingP[,-1]))
Mtarix1<-confusionMatrix(testingP$diagnosis,predict(modelFit1,testingP[,-1]))
Matrix2<-confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
preProc
trainPC
preProc
Mtarix1
Matrix2
clear
data(iris)
library(ggplot2)
names(iris)
View(iris)
names(iris)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit<-train(Species~.,method="rpart",data=training)
modFit<-train(Species~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Trea")
test(modFit$finalModel,use.n=T,all=T,cex=0.8)
text(modFit$finalModel,use.n=T,all=T,cex=0.8)
text(modFit$finalModel,use.n=T,all=T,cex=0.5)
plot(modFit$finalModel,uniform=TRUE,main="Classification Trea")
text(modFit$finalModel,use.n=T,all=T,cex=0.5)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
head(ozone)
library(ElemStatLearn)
data(prostate)
str(prostate)
small=prostate[1:5,]
lm(lpsa~.,data=Small)
small=prostate[1:5,]
lm(lpsa~.,data=Small)
lm(lpsa~.,data=small)
library(ISLR)
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
inBuild<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
validation<-Wage[-inBuild,]
buildData<-Wage[inBuild,]
inTrain<-createDataPartition(y=buildData$wage,p=0.7,list=FALSE)
training<-buildData[inTrain,]
testing<-buildData[-inTrain,]
dim(training)
dim(testing)
dim(validation)
mod1<-train(wage~.,method="glm",data=training)
mod2<-train(wage~.,method="rf",data=training,trControl=trainControl(method="cv"),number=3)
pred1<-predict(mod1,testing)
pred2<-predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
predDF<-data.frame(pred1,pred2,wage=testing$wage)
View(predDF)
combModFit<-train(wage~.,method="gam",data=predDF)
combModFit<-train(wage~.,method="gam",data=predDF)
combPred<-predict(combModFit,predDF)
combPred
sqrt(sum(pred1-testing$wage)^2)
sqrt(sum(pred2-testing$wage)^2)
sqrt(sum(combPred-testing$wage)^2)
pred1V<-predict(mod1,validation)
pred2V<-predict(mod2,validation)
predVDF<-data.frame(pred1=pred1V,pred2=pred2V)
predVDF
predVDF<-data.frame(pred1=pred1V,pred2=pred2V)
sqrt(sum(pred1V-validation$wage)^2)
sqrt(sum(pred2V-validation$wage)^2)
sqrt(sum(combPredV-validation$wage)^2)
combPredV
sqrt(sum(pred1V-validation$wage)^2)
sqrt(sum(pred2V-validation$wage)^2)
combPredV<-data.frame(pred1=pred1V,pred2=pred2V)
View(combPredV)
sqrt(sum(combPredV-validation$wage)^2)
sqrt(sum((pred1V-validation$wage)^2))
library(quantmod)
from.dat<-as.Date("01/01/08",format="%m/%d/%y")
to.dat<-as.Date("12/31/13",format="%m/%d/%y")
library(quantmod)
library(quantmod)
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
install.packages("quantmod")
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
library(quantmod)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
head(GOOG)
mGoog<-to.monthly(GOOG)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
library(quantmod)
from.dat<-as.Date("01/01/08",format="%m/%d/%y")
to.dat<-as.Date("12/31/13",format="%m/%d/%y")
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
head(GOOG)
mGoog<-to.monthly(GOOG)
from.dat<-as.Date("01/01/08",format="%m/%d/%y")
to.dat<-as.Date("12/31/13",format="%m/%d/%y")
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
#Summarize monthly and store as time series.
mGoog<-to.monthly(GOOG)
mGoog<-to.monthly(GOOG)
googOpen<-Op(mGoog)
tsl<-ts(googOpen,frequency=12)
plot(tsl,xlab="Years+1",ylab="GOOG")
kMeans<-kmeans(subset(training,select=-c(Species)),center=3)
kMeans<-kmeans(subset(training,select=-c(Species)),centers=3)
training
View(testing)
data(iris)
library(ggplot2)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
dim(training)
dim(testing)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
data(iris)
library(ggplot2)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
dim(training)
dim(testing)
kMeans1<-kmeans(subset(training,select=-c(Species)),centers=3)
training$clusters<-as.factor(Kmeans1$cluster)
qplot(Petal.Width,Petal.Length,colour=clusters,data=training)
kMeans1<-kmeans(subset(training,select=-c(Species)),centers=3)
kMeans1
training$clusters<-as.factor(kmeans1$cluster)
training$clusters<-as.factor(kMeans1$cluster)
View(training)
qplot(Petal.Width,Petal.Length,colour=clusters,data=training)
table(kMeans1$cluster,training$Species)
modFit<-train(clusters~.,data=subset(training,select=-c(Species)),method="rpart")
table(predict(modFit,training),training$Species)
testClusterPred<-predict(modFit,testing)
table(testClusterPred,testing$Species)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
View(vowel.test)
View(vowel.train)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
modFit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
modFit
library(caret)
modFit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
modFit
modFit2<-train(wage~.,method="gbm",data=vowel.train,verbose=FALSE)
print(modFit2)
modFit2<-train(y~.,method="gbm",data=vowel.train,verbose=FALSE)
modFit
pred1<-predict(modFit,vowel.test)
pred1
vowel.test$predRight<-pred1==vowel.test$y
View(vowel.train)
View(vowel.test)
table(pred1,vowel.test$y)
(1+1)
Tabla1<-table(pred1,vowel.test$y)
confusionMatrix(Tabla1)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
# Fit (1) a random forest predictor relating the factor variable y to the remaining variables
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
modFit
#a boosted predictor using the "gbm" method.
#Fit the model. #gbm<- Boosting with Trees
modFit2<-train(y~.,method="gbm",data=vowel.train,verbose=FALSE)
print(modFit2)
#What are the accuracies for the two approaches on the test data set?
#Predict New Values Random forest
pred1<-predict(modFit,vowel.test)
vowel.test$predRight<-pred1==vowel.test$y
Tabla1<-table(pred1,vowel.test$y)
confusionMatrix(Tabla1)
pred2<-predict(modFit2,vowel.test)
Tabla2<-table(pred2,vowel.test$y)
confusionMatrix(Tabla2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(testing)
mod1<-train(diagnosis~.,method="glm",data=training)
mod2<-train(diagnosis~.,method="rf",data=training,trControl=trainControl(method="cv"),number=3)
modlda=train(diagnosis~.,data=training,method="lda")
pred1<-predict(mod1,testing)
pred2<-predict(mod2,testing)
pred3<-predict(modlda,testing)
pred3
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
View(predDF)
View(predDF)
combModFit<-train(diagnosis~.,method="rf",data=predDF,trControl=trainControl(method="cv"),number=3)
combPred<-predict(combModFit,predDF)
combPred
#Accuracy
Tabla3<-table(combPred,testing$diagnosis)
confusionMatrix(Tabla3)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
View(concrete)
View(mixtures)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
View(concrete)
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
View(testing)
View(training)
View(concrete)
colnames(testing)
testing[,9]
svm<-predict(svm.model,testing[,-9])
svm
sqrt(sum((svm-testing[,9])^2))
#Evaluate on testing
sqrt((sum((svm-testing[,9])^2))/256)
sqrt((sum((svm-testing[,9])))/256)
sqrt((sum((svm-testing[,9])^2))/256)
sqrt((sum((svm-testing[,9])^2)))
107.44/2
107.44/256
sqrt((sum((svm-testing[,9])^2)))
sqrt((sum((svm-testing[,9])^2))/256)
set.seed(325)
library(e1071)
#svm
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm<-predict(svm.model,testing[,-9])
colnames(testing)
#Evaluate on testing
sqrt((sum((svm-testing[,9])^2))/256)
sqrt((sum((svm-testing[,9])^2))/256)
#Question 5
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
#svm
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm<-predict(svm.model,testing[,-9])
colnames(testing)
#Evaluate on testing
sqrt((sum((svm-testing[,9])^2))/256)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm<-predict(svm.model,testing[,-9])
sqrt((sum((svm-testing[,9])^2))/256)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
#svm
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm<-predict(svm.model,testing[,-9])
sqrt((sum((svm-testing[,9])^2))/256)
set.seed(3523)
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm<-predict(svm.model,testing[,-9])
colnames(testing)
#Evaluate on testing
sqrt((sum((svm-testing[,9])^2))/256)
set.seed(325)
svm.model<-svm(CompressiveStrength~.,data=training,cost=100,gamma=1)
svm<-predict(svm.model,testing[,-9])
colnames(testing)
#Evaluate on testing
sqrt((sum((svm-testing[,9])^2))/256)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svm.model<-svm(CompressiveStrength~.,data=training)
svm<-predict(svm.model,testing[,-9])
sqrt((sum((svm-testing[,9])^2))/256)
setwd("C:/Users/Alfonso/Desktop/JOM/Practical_Machine_Learning")
training<-read.csv("pml-training.csv",header=T)
testing<-read.csv("pml-testing.csv",header=T)
View(training)
str(training)
col(names)
colnames(training)
str(training$classe)
View(training)
