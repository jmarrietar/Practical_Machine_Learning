xlab="Transmission", ylab="Miles per Gallon")
qplot(mpg, qsec,data=mtcars,color=am)
qplot(mpg, qsec,data=mtcars,color=am)
qplot(qsec,mpg,data=mtcars,color=am)
meanMPG<-tapply(mtcars$mpg,mtcars$am,mean)
meanMPG
plot(mtcars$mpg~jitter(as.numeric(mtcars$am),col="blue",xaxt="n",pch=19))
plot(mtcars$mpg~jitter(as.numeric(mtcars$am),col="blue",pch=19))
plot(mtcars$mpg~jitter(as.numeric(mtcars$am)),col="blue",xaxt="n",pch=19)
axis(side=1,at=unique(as.numeric(mtcars$am)),labels=unique(mtcars$am))
meanMPG<-tapply(mtcars$mpg,mtcars$am,mean)
point(1:2,meanMPG,col="red",pch="-",cex=5)
points(1:2,meanMPG,col="red",pch="-",cex=5)
lm1<-lm(mtcars$mpg~as.factor(mtcars$am))
summary(lm1)
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
install.packages("MiKTeX")
***dd***
***dd***
plot(x, resid(lm1));
plot(mtcars$am, resid(lm1));
plot(as.factor(mtcars$am), resid(lm1));
plot(as.factor(mtcars$am), resid(lm1));
abline(h = 0)
summary(lm1)
anova(lm1)
#confident intervals
confint(lm1,level=0.95)
summary(lm1)
summary(lm1)
library(UsingR); data(mtcars)
mtcars
mtcars
str(mtcars)
mtcars$cyl=as.factors(mtcars$cyl)
mtcars$cyl=as.factor(mtcars$cyl)
str(mtcars)
lm1<-lm(mpg~cyl+wt,data=mtcars)
summary(lm1)
str(mtcars$cyl)
#Regression Models Unadjusted
lm2<-lm(mpg~cyl,data=mtcars)
summary(lm2)
summary(lm2)$coefficients
summary(lm1)$coefficients
#Regression Models
lm1<-lm(mpg~cyl+wt,data=mtcars)
summary(lm1)$coefficients
#Regression Models Unadjusted
lm2<-lm(mpg~cyl,data=mtcars)
summary(lm2)$coefficients
#Regression Models
lm1<-lm(mpg~cyl+wt,data=mtcars)
summary(lm1)$coefficients
fit2<-lm(mpg~cyl+wt,data=mtcars)
fit3<-lm(mpg~cyl,data=mtcars)
anova(fit2, fit3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:5,2],3)
round(hatvalues(fit)[1:5],3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
round(dfbetas(fit)[1:5,2],3)
round(hatvalues(fit)[1:5],3)
Data<-shuttle
library(MASS)
?shuttle
Data<-shuttle
logmodel<-(use~wind,data=Data,family="binomial")
logmodel<-(use~wind,family="binomial",data=Data)
logmodel<-glm(use~wind,family="binomial",data=Data)
summary(logmodel )
exp(logmodel$coeff)
logmodel<-glm(use~wind+magn,family="binomial",data=Data)
summary(logmodel )
library(MASS)
exp(logmodel$coeff)
fit2 <- glm(auto ~ wind + magn -1, binomial, shuttle)
fit4 <- glm(1-auto ~ wind + magn -1, binomial, shuttle)
fit2$coefficients
fit4$coefficients
fit4 <- glm(1-auto ~ wind + magn -1, binomial, shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
shuttle$wind <- as.numeric(shuttle$wind=="head")
fit2 <- glm(auto ~ wind + magn -1, binomial, shuttle)
fit4 <- glm(1-auto ~ wind + magn -1, binomial, shuttle)
fit2$coefficients
fit4$coefficients
InsectSprays
?InsectSprays
str(InsectSprays)
glm1<-glm(count~spray,family="poisson",data=InsectSprays)
summary(glm1)
summary(glm1)
glm1$fitted
summary(glm1)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 1)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
x <- as.numeric(-5:5)
x <- as.numeric(-5:5)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
knots
function(knot)
(x > knot) * (x - knot)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
x <- as.numeric(-5:5)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
x[1]
x[1]+x[2]
x <- as.numeric(-5:5)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
(x > knot)
knots
function(knot)
(x > knot) * (x - knot)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yhat
lm(y ~ xMat - 1)
xMat
yhat <- predict(lm(y ~ xMat - 1))
yhat
x
1.0477537
setwd("C:/Users/JosePortatil/Documents")
Data=read.table(file.choose(),header=T,sep";")
Data=read.table(file.choose(),header=T,sep=";")
View(Data)
Data=read.table(file.choose(),header=T,sep=",")
View(Data)
#INICIO DE FUNCIONES PERSONALIZADAS PARA OBTENER RESULTADOS DE RLM
#TABLA DE TODAS LAS REGRESIONES POSIBLES
allregtable<-function(modeloreg,respuesta){
t1<-summary(regsubsets(model.matrix(modeloreg)[,-1],respuesta,
nbest=2^(modeloreg$rank-1)-1,really.big=T))
t2<-as.vector(apply(t1$which[,-1],1,sum))
t3<-apply(t1$which[,-1],1,
function(x) as.character(paste(colnames(model.matrix(modeloreg)[,-1])[x],collapse=" ")))
results<-data.frame(NoOfVars=t2,R2=round(t1$rsq,4),adjR2=round(t1$adjr2,4),
SSE=round(t1$rss,5),Cp=round(t1$cp,4),Variables.in.model=t3)
#,MSE=round(t1$rss/(nrow(model.matrix(modeloreg)[,-1])-(NoOfVars+1)),5)
results
}
#PARA OBTENER LA ANOVA DEL MODELO DE RLM CREAMOS LA SIGUIENTE FUNCIÓN
miAnova<-function(modeloreg){
SSq<-unlist(anova(modeloreg)["Sum Sq"])
k<-length(SSq)-1
SSR<-sum(SSq[1:k])
SSE<-SSq[(k+1)]
MSR<-SSR/k
df.error<-unlist(anova(modeloreg)["Df"])[k+1]
MSE<-SSE/df.error
F0<-MSR/MSE
VP<-pf(F0,k,df.error,lower.tail=F)
result<-data.frame(SumSq=c(SSR,SSE),Df=c(k,df.error),MeanSq=c(MSR,MSE),
F0=c(round(F0,digits=3),' '),P.value=c(format(VP,scientific = TRUE,digits=3),' '),
row.names =c("Modelo","Error"))
cat("Tabla ANOVA Modelo de Regresión","\n")
result
}
#FIN DE FUNCIONES PERSONALIZADAS PARA OBTENER RESULTADOS DE RLM
#INSTALACIÓN Y CARGA DE PAQUETES NECESARIOS
install.packages(c("car","leaps"))
require(car)
require(leaps)
install.packages("leaps")
require(car)
require(leaps)
base40=read.table(file.choose(),header=T,sep=",")
attach(base40)
#MATRIZ DE DISPERSIÓN
plot(base40)
#AJUSTE DEL MODELO, TABLA ANOVA Y PARÁMETROS ESTIMADOS
modelo<-lm(Y~.,base40)
miAnova(modelo)
summary(modelo)
base40$ID<-NULL
View(base40)
#INICIO DE FUNCIONES PERSONALIZADAS PARA OBTENER RESULTADOS DE RLM
#TABLA DE TODAS LAS REGRESIONES POSIBLES
allregtable<-function(modeloreg,respuesta){
t1<-summary(regsubsets(model.matrix(modeloreg)[,-1],respuesta,
nbest=2^(modeloreg$rank-1)-1,really.big=T))
t2<-as.vector(apply(t1$which[,-1],1,sum))
t3<-apply(t1$which[,-1],1,
function(x) as.character(paste(colnames(model.matrix(modeloreg)[,-1])[x],collapse=" ")))
results<-data.frame(NoOfVars=t2,R2=round(t1$rsq,4),adjR2=round(t1$adjr2,4),
SSE=round(t1$rss,5),Cp=round(t1$cp,4),Variables.in.model=t3)
#,MSE=round(t1$rss/(nrow(model.matrix(modeloreg)[,-1])-(NoOfVars+1)),5)
results
}
#PARA OBTENER LA ANOVA DEL MODELO DE RLM CREAMOS LA SIGUIENTE FUNCIÓN
miAnova<-function(modeloreg){
SSq<-unlist(anova(modeloreg)["Sum Sq"])
k<-length(SSq)-1
SSR<-sum(SSq[1:k])
SSE<-SSq[(k+1)]
MSR<-SSR/k
df.error<-unlist(anova(modeloreg)["Df"])[k+1]
MSE<-SSE/df.error
F0<-MSR/MSE
VP<-pf(F0,k,df.error,lower.tail=F)
result<-data.frame(SumSq=c(SSR,SSE),Df=c(k,df.error),MeanSq=c(MSR,MSE),
F0=c(round(F0,digits=3),' '),P.value=c(format(VP,scientific = TRUE,digits=3),' '),
row.names =c("Modelo","Error"))
cat("Tabla ANOVA Modelo de Regresión","\n")
result
}
#FIN DE FUNCIONES PERSONALIZADAS PARA OBTENER RESULTADOS DE RLM
#INSTALACIÓN Y CARGA DE PAQUETES NECESARIOS
install.packages(c("car","leaps"))
require(car)
require(leaps)
attach(base40)
#MATRIZ DE DISPERSIÓN
plot(base40)
#AJUSTE DEL MODELO, TABLA ANOVA Y PARÁMETROS ESTIMADOS
modelo<-lm(Y~.,base40)
miAnova(modelo)
summary(modelo)
install.packages(c("car", "leaps"))
#INICIO DE FUNCIONES PERSONALIZADAS PARA OBTENER RESULTADOS DE RLM
#TABLA DE TODAS LAS REGRESIONES POSIBLES
allregtable<-function(modeloreg,respuesta){
t1<-summary(regsubsets(model.matrix(modeloreg)[,-1],respuesta,
nbest=2^(modeloreg$rank-1)-1,really.big=T))
t2<-as.vector(apply(t1$which[,-1],1,sum))
t3<-apply(t1$which[,-1],1,
function(x) as.character(paste(colnames(model.matrix(modeloreg)[,-1])[x],collapse=" ")))
results<-data.frame(NoOfVars=t2,R2=round(t1$rsq,4),adjR2=round(t1$adjr2,4),
SSE=round(t1$rss,5),Cp=round(t1$cp,4),Variables.in.model=t3)
#,MSE=round(t1$rss/(nrow(model.matrix(modeloreg)[,-1])-(NoOfVars+1)),5)
results
}
allregtable(modelo,Y)
}
allregtable(modelo,Y)
#INICIO DE FUNCIONES PERSONALIZADAS PARA OBTENER RESULTADOS DE RLM
#TABLA DE TODAS LAS REGRESIONES POSIBLES
allregtable<-function(modeloreg,respuesta){
t1<-summary(regsubsets(model.matrix(modeloreg)[,-1],respuesta,
nbest=2^(modeloreg$rank-1)-1,really.big=T))
t2<-as.vector(apply(t1$which[,-1],1,sum))
t3<-apply(t1$which[,-1],1,
function(x) as.character(paste(colnames(model.matrix(modeloreg)[,-1])[x],collapse=" ")))
results<-data.frame(NoOfVars=t2,R2=round(t1$rsq,4),adjR2=round(t1$adjr2,4),
SSE=round(t1$rss,5),Cp=round(t1$cp,4),Variables.in.model=t3)
#,MSE=round(t1$rss/(nrow(model.matrix(modeloreg)[,-1])-(NoOfVars+1)),5)
results
}
modelo
Y
allregtable(modelo,Y)
true
TRUE
TRUE+TRUE+FALSE+TRUE
TRUE+TRUE
TRUE
T
!T
number_vector<-c(0,0,1,5,299)
as.logical(number_vector)
x<-5
y<-25
x+y
my_variable<-"I like apples"
class(my_variable)
a<-T
a
b<-T+F
b
a+b
startup_data<-read.csv('crunchbase_monthly_export.csv',header=T,stringAsFactors=F)
startup_data<-read.csv('crunchbase_monthly_export.csv',header=T,stringsAsFactors=F)
View(startup_data)
help(read.csv)
head(startup_data)
tail(startup_data)
nrows(startup_data)
nrow(startup_data)
nol(startup_data)
ncol(startup_data)
colnames(startup_data)
tail(startup_data)
ncol(startup_data)
colnames(startup_data)
help(mean)
my_vector<-c(2,14,10,15,3)
my_vector
my_vector*2
my_vector+my_vector
my_vector+my_vector
my_vector
my_vector[1]
my_vector[1:3]
my_vector[-2]
my_vector
my_vector>2
my_vector[my_vector>2]
my_matrix<-matrix(1:6,ncol=3,nrow=2,byrow=TRUE)
my_matrix<-matrix(1:6,ncol=3,nrow=2,byrow=TRUE)
my_matrix
my_matrix<-matrix(1:6,ncol=3,nrow=2,byrow=FALSE)
my_matrix
my_matrix[1,]
my_matrix[1,:]
y_matrix[1,]
my_matrix[1,]
my_matrix
my_matrix[,1:2]
is.data.frame(startup_data)
is.matrix(startup_data)
startup_data$name
startup_data$name[1:50]
startup_data$name[1:50,]
young_startups<-startup_data$founded_year>2012
young_startups
young_startups[1:10]
startup_data$foundedyear[1:10]
young_startups[1:10]
startup_data$founded_year[1:10]
sum(young_startups)
sum(young_startups,na.rm=TRUE)
startup_data$name
startup_data$name[1]
colnames(startup_data)
head(startup_data)
startup_data$state_code=="NY"
sum(startup_data$state_code=="NY")
startup_data$state_code=="NY"
head(startup_data)
startup_data[,1:50]
startup_data[1:50,]
sum(startup_data[1:50,]$funding_rounds)
hist(startup_data$fundind_rounds,main="Series A crunch",xlab="Fuding Rounds",ylab="# of startups",xlim=c(1,15))
hist(startup_data$fundind_rounds,main="Series A crunch",xlab="Fuding Rounds",ylab="# of startups",xlim=c(1,15))
startup_data$fundind_rounds,
startup_data$fundind_rounds
hist(startup_data$funding_rounds,main="Series A crunch",xlab="Fuding Rounds",ylab="# of startups",xlim=c(1,15))
par(bg="#36394A",col="white",fg="white",col.axis="white",col.lab="white",col.main="white",family="Verdana")
hist(startup_data$funding_rounds,main="Series A crunch",xlab="Fuding Rounds",ylab="# of startups",xlim=c(1,15))
par(bg="#36394A",col="white",fg="white",col.axis="white",col.lab="white",col.main="white",family="Verdana")
help(par)
getwd()
class_data<-read.csv('classes.csv',header=T,stringAsFactors=F)
class_data<-read.csv('classes.csv',header=T,stringsAsFactors=F)
head(class_data)
levels(class_data)
level(class_data)
str(class_data)
head(class_data)
View(Data)
View(class_data)
match(class_data$A,class_data$B,nomatch=0)
class_data$A[14]
class_data$A[23]
class_data$B[29]
class_data$B[20]
matches<-class_data$A %in% class_data$B
matches
class_data$A[matches]
class_data$A[14]
class_data$A[23]
class_data$B[29]
class_data$B[20]
quiz_class_data<-('classes_test.csv',header=T, stringsAsFactors=F)
quiz_class_data<-read.csv('classes_test.csv',header=T, stringsAsFactors=F)
head(quiz_class_data)
quiz_class_data
quiz_class_data(1,1)
quiz_class_data[1,1]
quiz_class_data[1,:]
quiz_class_data[1,]
quiz_class_data$A="Trina"
quiz_class_data$A
quiz_class_data<-read.csv('classes_test.csv',header=T, stringsAsFactors=F)
quiz_class_data$A=="Trina"
quiz_class_data(quiz_class_data$A=="Trina")
quiz_class_data[quiz_class_data$A=="Trina"]
quiz_class_data[quiz_class_data$A=="Trina",]
match(quiz_class_data$A,quiz_class_data$B,nomatch=0)
quiz_class_data$A[31]
quiz_class_data$B[12]
quiz_class_data$A[12]
quiz_class_data$B[31]
quiz_class_data$A[12]
quiz_class_data$B[35]
quiz_class_data$A[35]
quiz_class_data$B[12]
quiz_class_data$A[36]
quiz_class_data$B[12]
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
install.packages("ISLR")
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
Wage<-subset(Wage,select=-c(logwage))
View(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-intrain,]
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
modFit<-train(wage~.,method="gbm",data=training,verbose=FALSE)
print(modFit)
#Plot the results
qplot(predict(modFit,testing),wage,data=testing)
data(iris)
library(ggplot2)
names(iris)
data(iris)
library(ggplot2)
names(iris)
tables(iris$Species)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=F)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
View(testing)
View(training)
modlda=train(Species~.,data=training,method="lda")
modnb=train(Species~.,data=training,method="nb")
plda
plda=predict(modlda,testing)
pnb=predict(modnb,testing)
plda
pnb
table(plda,pnb)
modglm=train(Species~.,data=training,method="glm",family="binomial")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
library(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
data(SAheart)
data(SAheart)
getwd()
setwd"C:/Users/JosePortatil/Dropbox/Data Science/Practical_Machine_Learning"
setwd("C:/Users/JosePortatil/Dropbox/Data Science/Practical_Machine_Learning")
data(SAheart)
data(SAheart.data)
SAheart <- read.csv("C:/Users/JosePortatil/Dropbox/Data Science/Practical_Machine_Learning/SAheart.data")
View(SAheart)
View(SAheart)
modglm=train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=training,method="glm",family="binomial")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modglm=train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=training,method="glm",family="binomial")
modglm=train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
pglm=predict(modglm,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(testSA$chd,pglm)
pglmTest=predict(modglm,testSA)
pglmTrain=predict(modglm,trainSA)
pglmTest=predict(modglm,testSA)
missClass(trainSA$chd,pglmTrain)
missClass(testSA$chd,pglmTest)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit<-train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit<-train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
